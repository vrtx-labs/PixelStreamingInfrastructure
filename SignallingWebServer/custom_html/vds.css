:root {
    /*Color scheme variables*/
    --colour-accent: #ee0000;
    --colour-accent-active: #b41818;
    --colour-accent2: #f6ebd8;
    --colour-base: #28231f;
    --colour-base2: #e4e1dd;
    --colour-background: #ffffff;
    --colour-text: #797979;

    --translate-amount: 82%;
}

body {
    overflow-y: hidden;
    margin: 0px;
    background-color: black;
    font-family: "Montserrat", sans-serif;
}

#playerUI {
    width: 100%;
    height: 100%;
}

canvas {
    image-rendering: crisp-edges;
    position: absolute;
}

video {
    position: absolute;
    width: 100%;
    height: 100%;
}

#player {
    width: 100%;
    height: 100%;
    position: absolute;
    background-color: #000;
}

#videoPlayOverlay {
    position: absolute;
    font-size: 1.8em;
    width: 100%;
    height: 100%;
    color: var(--colour-background);
}

#velux-logo {
    width: 18vmin;
    cursor: default;
}

#lowerMenu {
    height: 40vmin;
    cursor: default;
}
#lowerMenu button {
    cursor: pointer;
    background-color: transparent;
    background: none;
}
#lowerMenu p {
    font-family: "TransformVariableVF";
}

#menuHeader {
    flex: 0 0 15%;
    justify-content: space-between;
    border-bottom: 0.125rem solid var(--colour-base2);
}

#headerTitle {
    align-self: flex-start;
    font-size: 1rem;
    margin: 1rem 0 1rem 3.7rem;
}

#menuButtons {
    align-self: flex-end;
    justify-content: flex-end;
    margin: 0.5rem 1rem auto 0;
}
#menuButtons > button {
    width: 2rem;
    height: 2rem;
}

#headerMenuContent {
    flex: 0 0 15%;
    justify-content: flex-start;
}

#headerMenuContent > button {
    margin: 0 3.5rem auto 3.5rem;
    height: 1.5rem;
}

#containerSliderDaylight {
    width: 70%;
    justify-content: space-between;
}

#containerRoomOptions {
    padding-left: 3.5rem;
}

#containerRoomOptions > button {
    border: none;

    font-size: 1rem;
    height: 8rem;
    width: 8rem;
    margin: auto 1rem auto 0;
}
#containerRoomOptions > button:hover {
    background-color: var(--colour-base2);
}
#containerRoomOptions > button:active,
#containerRoomOptions > button:focus {
    background-color: var(--colour-accent2);
    border-top: 0.075rem solid var(--colour-base2);
    border-left: 0.125rem solid var(--colour-accent);
}

#containerHelp {
    margin: 0 2rem 0 auto;
}

#containerScreenshot {
    margin: 0 2rem 0 auto;
}
#containerScreenshot > button {
    padding: 0.5rem;
    border: 0.125rem solid var(--colour-base);
}
#containerScreenshot > button:hover {
    border: 0.125rem solid var(--colour-base2);
}
#containerScreenshot > button:active {
    border: 0.125rem solid var(--colour-accent);
}

.menu-hidden {
    transform: translateY(var(--translate-amount));
    animation: slideOut 0.5s none;
}

@keyframes slideOut {
    0% {
        transform: translateY(0%);
    }
    100% {
        transform: translateY(var(--translate-amount));
    }
}

.menu-visible {
    transform: translateY(0%);
    animation: slideIn 0.5s forwards;
}

@keyframes slideIn {
    0% {
        transform: translateY(var(--translate-amount));
    }
    100% {
        transform: translateY(0%);
    }
}

.menu-button {
    background-color: transparent;
    background: none;
    border: none;
}
.menu-button:hover {
    border-top: 0.125rem solid var(--colour-base2);
}
.menu-button:active,
.menu-button:focus {
    border-top: 0.125rem solid var(--colour-accent);
}
#buttonToggleMenu:active,
#buttonToggleMenu:focus:hover {
    border-top: 0.125rem solid var(--colour-base2);
}
#buttonToggleMenu:focus {
    border-top: none;
}

.slide-container {
    width: 400px;
    height: 55%;
    justify-self: center;
    align-self: center;
}

.slider {
    appearance: none;
    -webkit-appearance: none;
    width: 95%;
    height: 100%;
    background: var(--colour-base2);
    outline: none;
    opacity: 0.7;
    -webkit-transition: 0.2s;
    transition: opacity 0.2s;
}

.slider:hover {
    opacity: 1;
}

.slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 25px;
    height: 25px;
    background: #212f44;
    cursor: pointer;
}

.slider::-moz-range-thumb {
    width: 25px;
    height: 25px;
    background: #212f44;
    cursor: pointer;
}

.dummy-room {
    width: 65%;
    height: 65%;
    background-color: var(--colour-accent2);
}

.char-icon {
    border: 0.125rem solid var(--colour-base2);
    font-size: 1rem;
    padding: auto;
    width: 2rem;
    height: 2rem;
    display: grid;
    justify-content: center;
    align-content: center;
}
.char-icon p {
    margin: auto;
    text-justify: center;
    font-family: "TransformVariableVF";
    color: var(--colour-text);
}

.svg-image {
    background-color: transparent;
    width: 100%;
    height: 100%;
    margin: 0;
}

.fill {
    width: 100%;
    height: 100%;
}

.fill-screen {
    pointer-events: none;
    position: absolute;
    width: 100%;
    height: 100%;
    bottom: 0;
    z-index: 50;

    background-color: transparent;
    border: none;
}
.fill-screen > div {
    /* Because children of the transparent fill screen inherit the inability to be
	clicked, we need to reset this behaviour */
    pointer-events: auto;
}

.flex-item {
    display: flex;
    align-self: flex-start;
    margin: auto;
}

.flex-center {
    display: flex;
    align-self: center;
    justify-self: center;
    margin: auto;
}

.vertical-container {
    background-color: var(--colour-background);
    display: flex;
    flex-direction: column;
    flex: 10;
}

.horizontal-container {
    background-color: var(--colour-background);
    display: flex;
    flex-direction: row;
    flex: 10;
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr) 3.5fr;
    grid-template-rows: repeat(3, 1fr);
    row-gap: 0.5rem;
    column-gap: 0.5rem;
}

.grid-cell {
    display: grid;
}

.gr1 {
    grid-row: 1;
}
.gr2 {
    grid-row: 2;
}
.gr3 {
    grid-row: 3;
}
.gc1 {
    grid-column: 1;
}
.gc2 {
    grid-column: 2;
}
.gc3 {
    grid-column: 3;
}
.gc4 {
    grid-column: 4;
}
.gc5 {
    grid-column: 5;
}

.grid-cell > p {
    margin: auto;
    text-justify: center;
    font-family: "TransformVariableVF";
    color: var(--colour-text);
}

.horizontal-stretch {
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
}

.bottom-absolute {
    position: absolute;
    bottom: 0;
}

.top-absolute {
    position: absolute;
    top: 0;
}

/****************** CSS of the Pixel Streaming Interface ******************/

.clickableState {
    /* State for element to be clickable */
    align-items: center;
    justify-content: center;
    display: flex;
    cursor: pointer;
}

.textDisplayState {
    /* State for element to show text, this is for informational use*/
    align-items: center;
    justify-content: center;
    display: flex;
    cursor: pointer;
}

.hiddenState {
    /* State to hide overlay, WebRTC communication is in progress and or is playing */
    display: none;
}

#playButton {
    display: inline-block;
    height: auto;
    z-index: 30;
}

img#playButton {
    max-width: 241px;
    width: 10%;
}

#freezeFrameOverlay {
    background-color: transparent;
}

.freezeframeBackground {
    background-color: #000 !important;
}

#overlay {
    width: 100%;
    height: 100%;
    z-index: 20;
    position: absolute;
    color: var(--colour-base);
    pointer-events: none;
    overflow: hidden;
}

#overlay button {
    background-color: var(--colour-base);
    border: 1px solid var(--colour-base);
    color: var(--colour-base);
    position: relative;
    width: 3rem;
    height: 3rem;
    padding: 0.5rem;
    text-align: center;
}

#fullscreen-btn {
    padding: 0.6rem !important;
}

#overlay button:hover {
    background-color: var(--colour-base);
    border: 3px solid var(--colour-accent-active);
    transition: 0.25s ease;
    padding-left: 0.55rem;
    padding-top: 0.55rem;
}

#overlay button:active {
    border: 3px solid var(--colour-accent-active);
    background-color: var(--colour-accent-active);
    padding-left: 0.55rem;
    padding-top: 0.55rem;
}

#overlay img {
    width: 100%;
    height: 100%;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: auto;
    color: var(--colour-background);
    text-align: center;
    border-radius: 15px;
    padding: 0px 10px;
    font-family: "Montserrat", sans-serif;
    font-size: 0.75rem;
    letter-spacing: 0.75px;
    /* Position the tooltip */
    position: absolute;
    top: 0;
    transform: translateY(25%);
    left: 125%;
    z-index: 20;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
    background-color: var(--colour-base);
}

#connection .tooltiptext {
    /*top: 125%;
	transform: translateX(-25%);
  	left: 0;*/
    z-index: 20;
    padding: 5px 10px;
}

#settings-panel .tooltiptext {
    display: block;
    top: 125%;
    transform: translateX(-50%);
    left: 0;
    z-index: 20;
    padding: 5px 10px;
    border: 3px solid var(--colour-background);
    width: max-content;
}

#controls {
    position: absolute;
    top: 2%;
    left: 1%;
    font-family: "Michroma", sans-serif;
    pointer-events: all;
    display: block;
}

#controls > * {
    margin-bottom: 0.5rem;
    border-radius: 50%;
    display: block;
    height: 2rem;
    line-height: 1.75rem;
    padding: 0.5rem;
}

#controls #additionalinfo {
    text-align: center;
    font-family: "Montserrat", sans-serif;
}

#connection {
    /*position: absolute;
	bottom: 5%;*/
    padding-left: 7%;
    font-family: "Michroma", sans-serif;
    height: 3rem;
    width: 3rem;
    pointer-events: all;
}

.noselect {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Old versions of Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently
									supported by Chrome, Edge, Opera and Firefox */
}

.panel-wrap {
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    height: 100%;
    min-width: 20vw;
    transform: translateX(100%);
    transition: 0.3s ease-out;
    pointer-events: all;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    overflow-y: auto;
    overflow-x: hidden;
    background-color: rgba(30, 29, 34, 0.5);
}

.panel-wrap-visible {
    transform: translateX(0%);
}

.panel {
    color: #eee;
    overflow-y: auto;
    padding: 1em;
}

#heading {
    display: inline-block;
    font-size: 2em;
    margin-block-start: 0.67em;
    margin-block-end: 0.67em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    position: relative;
    padding: 0 0 0 2rem;
}

#close {
    margin: 0.5rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    padding-right: 0.5rem;
    font-size: 2em;
    float: right;
}

#close:after {
    padding-left: 0.5rem;
    display: inline-block;
    content: "\00d7"; /* This will render the 'X' */
}

#close:hover {
    color: var(--colour-accent-active);
    transition: ease 0.3s;
}

#content {
    margin: 0 0 0 4rem;
}

.setting {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 0;
    margin: 0.5rem 0;
}

.settings-text {
    margin-right: 2rem;
    display: flex;
}

/*** Toggle Switch styles ***/
.tgl-switch {
    vertical-align: middle;
    display: inline-block;
}

.tgl-switch .tgl {
    display: none;
}

.tgl,
.tgl:after,
.tgl:before,
.tgl *,
.tgl *:after,
.tgl *:before,
.tgl + .tgl-slider {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
.tgl::-moz-selection,
.tgl:after::-moz-selection,
.tgl:before::-moz-selection,
.tgl *::-moz-selection,
.tgl *:after::-moz-selection,
.tgl *:before::-moz-selection,
.tgl + .tgl-slider::-moz-selection {
    background: none;
}
.tgl::selection,
.tgl:after::selection,
.tgl:before::selection,
.tgl *::selection,
.tgl *:after::selection,
.tgl *:before::selection,
.tgl + .tgl-slider::selection {
    background: none;
}

.tgl + .tgl-slider {
    outline: 0;
    display: block;
    width: 40px;
    height: 18px;
    position: relative;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.tgl + .tgl-slider:after,
.tgl + .tgl-slider:before {
    position: relative;
    display: block;
    content: "";
    width: 50%;
    height: 100%;
}
.tgl + .tgl-slider:after {
    left: 0;
}
.tgl + .tgl-slider:before {
    display: none;
}

.tgl-flat + .tgl-slider {
    padding: 2px;
    -webkit-transition: all 0.2s ease;
    transition: all 0.2s ease;
    background: var(--colour-background);
    border: 3px solid var(--colour-background);
    border-radius: 2em;
}

.tgl-flat + .tgl-slider:hover {
    border: 3px solid var(--colour-accent-active);
}

.tgl-flat + .tgl-slider:after {
    -webkit-transition: all 0.2s ease;
    transition: all 0.2s ease;
    background: var(--colour-base);
    content: "";
    border-radius: 1em;
}

.tgl-flat:checked + .tgl-slider {
    border: 3px solid var(--colour-background);
}

.tgl-flat:checked:hover + .tgl-slider {
    border: 3px solid var(--colour-accent-active);
}

.tgl-flat:checked + .tgl-slider:after {
    left: 50%;
    background: var(--colour-accent-active);
}

.subtitle-text {
    margin: 0 0 0 1rem;
    color: var(--colour-background);
    position: relative;
}

.form-group {
    padding-top: 4px;
    display: grid;
    grid-template-columns: 50% 50%;
    row-gap: 4px;
    padding-right: 10px;
    padding-left: 10px;
}

.form-group label {
    color: var(--colour-background);
    vertical-align: middle;
    font-weight: normal;
}

#stats {
    margin-left: 1rem;
}

#LatencyStats {
    margin-left: 1rem;
}

#hiddenInput {
    position: absolute;
    left: -10%; /* Although invisible, push off-screen to prevent user interaction. */
    width: 0px;
    opacity: 0;
}

#editTextButton {
    position: absolute;
    height: 40px;
    width: 40px;
}

.form-group label {
    margin-right: 2rem;
    min-width: 75%;
}

input {
    text-align: right;
}

.warning {
    box-sizing: border-box;
    position: relative;
    transform: scale(var(--ggs, 1));
    width: 20px;
    height: 20px;
    border: 2px solid;
    border-radius: 40px;
    display: none;
}
.warning::after,
.warning::before {
    content: "";
    display: block;
    box-sizing: border-box;
    position: absolute;
    border-radius: 3px;
    width: 2px;
    background: currentColor;
    left: 7px;
}
.warning::after {
    top: 2px;
    height: 8px;
}
.warning::before {
    height: 2px;
    bottom: 2px;
}

/* Flat buttons */
input[type="button"] {
    background-color: transparent;
    color: var(--colour-background);
    font-family: "Montserrat";
    border: 3px solid var(--colour-background);
    border-radius: 1rem;
    font-size: 0.75rem;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
}

input[type="button"]:hover {
    border: 3px solid var(--colour-accent-active);
    transition: ease 0.3s;
}
input[type="button"]:active {
    background-color: transparent;
}

#encoder-params-submit,
#webrtc-params-submit {
    text-align: center;
}

select,
input[type="number"] {
    background-color: var(--colour-base);
    color: var(--colour-background);
    border: 1px solid var(--colour-background);
    padding: 0.25rem;
    font-family: "Montserrat";
    border-radius: 0.25rem;
}

input[type="number"]::-webkit-inner-spin-button {
    margin-left: 0.5rem;
}

input[type="number"]:disabled {
    padding-right: 0.5rem;
    appearance: textfield;
    -moz-appearance: textfield;
}

input[type="number"]:disabled::-webkit-inner-spin-button {
    display: none;
}

#streamingVideo {
    pointer-events: all;
}

embed {
    border: none;
    width: 100%;
    height: 100%;
}

g {
    fill: var(--colour-accent);
}

object {
    pointer-events: none;
}

#connectionStrength {
    fill: var(--colour-background);
}

#minimize {
    display: none;
}

#afkOverlay {
    z-index: 999;
    background-color: rgba(30, 29, 34, 0.5);
    display: inline-block;
    height: 100vh;
    width: 100vw;
    line-height: 100vh;
    text-align: center;
    overflow: hidden;
}

#afkOverlay center {
    display: inline-block;
    line-height: 1.5;
    height: 100vh;
}

@font-face {
    font-family: "TransformVariableVF";
    src: url("/fonts/VELUXTransformVariableVF.ttf");
}

.font-velux {
    font-family: "TransformVariableVF";
}
